%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - CMakeLists.txt
  - cmake

scope: source.cmake

variables:
  identifier: '[a-zA-Z_][a-zA-Z0-9_\-]{,64}'
  var_identifier: '[a-zA-Z_][a-zA-Z0-9_\-\$\{\}]{,64}'
  punctuation: '\(\)\"\$\{\}\<\>\;\#'

contexts:
  main:
    - include: command
    - include: comment

  comment:
    - match: '\#\[=*\['
      scope: punctuation.definition.comment.begin.cmake
      push: block_comment

    - match: '\#'
      push: line_comment

  block_comment:
    - meta_scope: comment.block.cmake
    - match: '\]=*\]'
      scope: punctuation.definition.comment.end.cmake
      pop: 1

  line_comment:
    - meta_scope: comment.line.cmake
    - match: '\n'
      pop: 1

  command:
    - match: '({{identifier}})\s{,5}(\()'
      captures:
        1: entity.name.function.cmake
        2: punctuation.definition.parameters.begin.cmake
      push: arguments

  arguments:
    - meta_content_scope: meta.string
    - match: '(\))'
      captures:
        1: punctuation.definition.parameters.end.cmake
      pop: 1

    - include: escaped
    - include: quote
    - include: variable
    - include: comment
    - include: predefined_variables
    - include: keywords
    - include: bracket

  escaped:
    - match: '\\[a-zA-Z{{punctuation}}]'
      scope: constant.escaped.cmake

  bracket:
    - match: '\('
      scope: punctuation.section.begin.cmake
      push:
        - match: '\)'
          scope: punctuation.section.end.cmake
          pop: 1
        - include: arguments

  quote:
    - match: '\"'
      push: quoted_argument

  quoted_argument:
    - meta_scope: string.quoted.cmake
    - match: '\n'
    - match: '\"'
      pop: 1

    - include: escaped
    - include: variable

  variable:
    - match: '\$(?:ENV|CACHE)?\{'
      push:
        - meta_scope: variable.reference.cmake
        - match: '\}'
          pop: 1
        - include: variable

    - match: '\$\('
      push:
        - meta_scope: variable.reference.cmake
        - match: '\)'
          pop: 1
        - include: variable

    - match: '\$\<'
      push:
        - meta_scope: variable.reference.cmake
        - match: '\>'
          pop: 1
        - include: variable

  predefined_variables:
    - match: '\b(?:(?:CMAKE|CPACK|CTEST){{var_identifier}})\b'
      scope: storage.property.cmake

    - match: '\b(?:(?:PROJECT|MSVC|XCODE|MINGW|MYSY|CYGWIN|ANDROID|IOS|UNIX|APPLE|WINDOWS)[A-Z0-9_]{0,64})\b'
      scope: storage.property.cmake

  keywords:
    - match: '\b(?:CACHE|ENV|GLOBAL|{{identifier}}_SCOPE)\b'
      scope: storage.language.cmake

    - match: '\b(?:AND|OR|NOT)\b'
      scope: keyword.operator.cmake

    - match: '\b(?:ON|OFF|YES|NO|TRUE|FALSE)\b'
      scope: constant.logical.cmake

    - match: '\b(?:BOOL|FILEPATH|PATH|STRING|INTERNAL)\b'
      scope: support.type.cmake

    - match: '\b(?:ALIAS|STATIC|SHARED|INTERFACE|PRIVATE|PUBLIC|IMPORTED|UNKNOWN|OBJECT)\b'
      scope: support.function.cmake

    - match: '\b(?:(?:SOURCE|INCLUDE)(?:S|_DIR|_DIRECTORIES)?)\b'
      scope: support.type.cmake

    - match: '\b(?:REQUIRED|PROPERT(?:Y|IES))\b'
      scope: support.function.cmake

    - match: '\b(?:CALL|COMMAND|DEPENDS|PROPAGATE)\b'
      scope: support.function.cmake

    - match: '\b(?:NAME|VERSION|LANGUAGES|DESCRIPTION|COMMENT)\b'
      scope: support.function.cmake

    - match: '\b(?:(?:FATAL|SEND)_ERROR|(?:AUTHOR_)?WARNING|DEPRECATION|NOTICE|STATUS|VERBOSE|DEBUG|TRACE)\b'
      scope: support.function.cmake

    - match: '\b(?:CHECK_(START|PASS|FAIL))\b'
      scope: keyword.operator.cmake

    - match: '\b(?:POLICY|TARGET|TEST)\b'
      scope: support.function.cmake

    - match: '\b(?:DEFINED|(?:{{var_identifier}})?(?:FOUND|DEFINED|INCLUDED)|IN(?:_LIST)?)\b'
      scope: keyword.operator.boolean.cmake

    - match: '\b(?:EXISTS|IS_(?:EXISTS|NEWER_THAN|DIRECTORY|SYMLINK|ABSOLUTE))\b'
      scope: keyword.operator.boolean.cmake

    - match: '\b(?:(?:MAKE|WORKING)_(?:FILE|DIRECTORY))\b'
      scope: support.function.cmake

    - match: '\b(?:FILE(?:S)?|DIRECTOR(?:Y|ES)|DESTINATION|PATTERN|EXCLUDE)\b'
      scope: support.function.cmake

    - match: '\b(?:(?:RELATIVE|ABSOLUTE)_PATH)\b'
      scope: support.function.cmake

    - match: '\b(?:(?:STR|VERSION_)?(?:EQUAL|LESS|GREATER|LESS_EQUAL|GREATER_EQUAL)|PATH_EQUAL|MATCHES)\b'
      scope: keyword.operator.boolean.cmake

    - match: '\b(?:FIND|REPLACE|SORT|FILTER|APPEND|PREPEND|INSERT|CONCAT|JOIN|LENGTH)\b'
      scope: support.function.cmake

    - match: '\b(?:GET|REVERSE|POP_(?:BACK|FRONT)|REMOVE_(?:AT|ITEM|DUPLICATES))\b'
      scope: support.function.cmake

    - match: '\b(?:REGEX|MATCH(?:ALL)?|TOLOWER|TOUPPER|(?:SUB|APPEND_)STRING|STRIP|REPEAT)\b'
      scope: support.function.string.cmake
