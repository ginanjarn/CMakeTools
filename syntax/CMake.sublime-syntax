%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - CMakeLists.txt
  - cmake

scope: source.cmake

variables:
  identifier: '[A-Z-a-z_][A-Z-a-z0-9_]*'
  space: '[ \t]'
  newline: '\n'
  escaped: '\\[^A-Z-a-z0-9;]|\\[trn;]'
  bracket_open: '\[=*\['
  bracket_close: '\]=*\]'

contexts:
  main:
    - include: command_invocation
    - include: comments

  comments:
    - include: bracket_comment
    - include: line_comment

  command_invocation:
    - meta_content_scope: meta.command_invocation.cmake

    - match: '{{space}}*({{identifier}}){{space}}*(\()'
      captures:
        1: entity.name.function.cmake
        2: puctuation.definition.parameters.begin.cmake

      push: command_arguments

    - match: '\)'
      scope: puctuation.definition.parameters.end.cmake
      pop: 1

  command_arguments:
    - include: arguments

    - match: '(?=\))' # let caller recapture the bracket
      pop: 1

  arguments:
    - match: '{{escaped}}'
      scope: constant.character.escape.cmake

    - match: '\('
      scope: puctuation.definition.groups.begin.cmake
      push: groups

    - match: '\"'
      scope: puctuation.definition.quote.begin.cmake
      push: quoted_argument

    - match: '{{bracket_open}}'
      scope: puctuation.definition.bracket.begin.cmake
      push: bracket_argument

    - include: comments
    - include: unquoted_argument

  groups:
    # may include multiple argumets
    - include: arguments

    - match: '\)'
      scope: puctuation.definition.groups.end.cmake
      pop: 1

  bracket_argument:
    - meta_scope: meta.string.bracket.cmake
      scope: puctuation.definition.bracket.end.cmake

    - match: '{{bracket_close}}'
      pop: 1

  quoted_argument:
    - meta_scope: meta.string.quoted.cmake

    - match: '{{escaped}}'
      scope: constant.character.escape.cmake

    - include: variable_reference
    - include: list_separator

    - match: '\"'
      scope: puctuation.definition.quote.end.cmake
      pop: 1

  unquoted_argument:
    - include: reserved_identifier

    - include: variable_reference
    - include: list_separator
    - include: keywords

    - match: '[^\s\(\)\#\"\\;]+'
      scope: 'meta.string.cmake'

  variable_reference:
    - match: '\$(?:ENV|CACHE)?\{'
      push:
        - meta_scope: variable.reference.cmake

        - include: reserved_identifier
        - include: variable_reference
        - match: '\}'
          pop: 1

    - match: '\$\('
      push:
        - meta_scope: variable.shell.cmake

        - include: reserved_identifier
        - include: variable_reference
        - match: '\)'
          pop: 1

    - match: '\$\<'
      push:
        - meta_scope: variable.generator.cmake

        - include: reserved_identifier
        - include: variable_reference 
        - match: '\>'
          pop: 1

  bracket_comment:
    - match: '#{{bracket_open}}'
      scope: puctuation.definition.comment.begin.cmake
      push:
        - meta_scope: comment.bracket.cmake

        - match: '{{bracket_close}}'
          scope: puctuation.definition.comment.end.cmake
          pop: 1

  line_comment:
    - match: '#'
      scope: puctuation.definition.comment.cmake
      push:
        - meta_scope: comment.line.cmake

        - match: '{{newline}}'
          pop: 1

  list_separator:
    - match: ';'
      scope: punctuation.separator.list.cmake

  reserved_identifier:
    - match: '\b(?:CMAKE|_CMAKE)_{{identifier}}\b'
      scope: variable.reserved.cmake

  keywords:
    - match: '\b(?:AND|OR|NOT)\b'
      scope: keyword.boolean.cmake

    - match: '\b(?:EXISTS|COMMAND|POLICY|TARGET|DEFINED)\b'
      scope: keyword.boolean.cmake

    - match: '\b(?:EQUAL|LESS|LESS_EQUAL|GREATER|GREATER_EQUAL|STREQUAL|STRLESS|STRLESS_EQUAL|STRGREATER|STRGREATER_EQUAL|VERSION_EQUAL|VERSION_LESS|VERSION_LESS_EQUAL|VERSION_GREATER|VERSION_GREATER_EQUAL|PATH_EQUAL|MATCHES)\b'
      scope: keyword.boolean.cmake

    - match: '\b(?:ON|YES|TRUE|Y|OFF|NO|FALSE|N|IGNORE|NOTFOUND)\b'
      scope: keyword.boolean.logical.cmake

    - match: '\b(?:IS|PASS|FAIL)_{{identifier}}\b'
      scope: keyword.boolean.logical.cmake
