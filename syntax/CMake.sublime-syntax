%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - CMakeLists.txt
  - cmake

scope: source.cmake

variables:
  identifier: '[A-Z-a-z_][A-Z-a-z0-9_]*'
  space: '[ \t]'
  newline: '\n'
  punctuation: '"\\:;\#\[\]=\$\{\}\(\)'
  escaped_characters: '\\[{{punctuation}}{{space}}{{newline}}]'
  bracket_open: '\[=*\['
  bracket_close: '\]=*\]'

contexts:
  main:
    - include: command_invocation
    - include: comments

  comments:
    - match: '#{{bracket_open}}'
      scope: puctuation.definition.comment.begin.cmake
      push: bracket_comment

    - match: '#'
      scope: puctuation.definition.comment.cmake
      push: line_comment

  command_invocation:
    - meta_content_scope: meta.command_invocation.cmake

    - match: '{{space}}*({{identifier}}){{space}}*(\()'
      captures:
        1: entity.name.function.cmake
        2: puctuation.definition.parameters.begin.cmake

      push: arguments

  arguments:

    - match: '\('
      scope: puctuation.definition.groups.begin.cmake
      push: grouped_arguments

    - match: '\"'
      scope: puctuation.definition.quote.begin.cmake
      push: quoted_argument

    - match: '{{bracket_open}}'
      scope: puctuation.definition.bracket.begin.cmake
      push: bracket_argument

    - include: unquoted_argument
    - include: comments

    # closing command argument
    - match: '\)'
      scope: puctuation.definition.groups.end.cmake
      pop: 1

  grouped_arguments:
    # include child argumets
    - include: arguments

    # closing group
    - match: '\)'
      scope: puctuation.definition.groups.end.cmake
      pop: 1

  inline_element:
    - match: '{{escaped_characters}}'
      scope: constant.character.escape.cmake

    - include: inline_variable
    - include: list_separator

  bracket_argument:
    - meta_scope: meta.string.bracket.cmake
      scope: puctuation.definition.bracket.end.cmake

    # closing bracket
    - match: '{{bracket_close}}'
      pop: 1

  quoted_argument:
    - meta_scope: meta.string.quoted.cmake
    - include: inline_element

    # closing quote
    - match: '\"'
      scope: puctuation.definition.quote.end.cmake
      pop: 1

  unquoted_argument:
    - include: inline_element
    - include: reserved_identifier
    - include: keywords

    - match: '[^\s{{punctuation}}]+'
      scope: 'meta.string.cmake'

  inline_variable:
    - match: '\$(?:ENV|CACHE)?\{'
      push: variable_reference

    - match: '\$\('
      push: shell_variable

    - match: '\$\<'
      push: genertor_expression

    - include: reserved_identifier

  variable_reference:
    - meta_scope: variable.cmake

    # nested variable
    - include: inline_variable
    - match: '\}'
      pop: 1

  shell_variable:
    - meta_scope: variable.shell.cmake

    # nested variable
    - include: inline_variable
    - match: '\)'
      pop: 1

  genertor_expression:
    - meta_scope: variable.other.cmake

    # nested variable
    - include: inline_variable 
    - match: '\>'
      pop: 1

  bracket_comment:
    - meta_scope: comment.bracket.cmake

    # closing bracket
    - match: '{{bracket_close}}'
      scope: puctuation.definition.comment.end.cmake
      pop: 1

  line_comment:
    - meta_scope: comment.line.cmake

    - match: '{{newline}}'
      pop: 1

  list_separator:
    - match: ';'
      scope: punctuation.separator.list.cmake

  reserved_identifier:
    - match: '\b_?CMAKE_{{identifier}}\b'
      scope: variable.language.cmake

  keywords:
    - match: '\b(?:AND|OR|NOT)\b'
      scope: keyword.operator.boolean.cmake

    - match: '\b(?:PUBLIC|PRIVATE|INTERFACE)\b'
      scope: keyword.other.cmake

    - match: '\b(?:BOOL|FILEPATH|PATH|STRING|INTERNAL|CACHE)\b'
      scope: support.type.cmake

    - match: '\b(?:STATIC|SHARED|MODULE|ALIAS)\b'
      scope: keyword.other.cmake

    - match: '\b(?:EXISTS|COMMAND|POLICY|TARGET|DEFINED)\b'
      scope: keyword.other.cmake

    - match: '\b(?:EQUAL|LESS|LESS_EQUAL|GREATER|GREATER_EQUAL|STREQUAL|STRLESS|STRLESS_EQUAL|STRGREATER|STRGREATER_EQUAL|VERSION_EQUAL|VERSION_LESS|VERSION_LESS_EQUAL|VERSION_GREATER|VERSION_GREATER_EQUAL|PATH_EQUAL|MATCHES)\b'
      scope: keyword.operator.boolean.cmake

    - match: '\b(?:ON|YES|TRUE|Y|OFF|NO|FALSE|N|IGNORE|NOTFOUND|NOT_\w+)\b'
      scope: constant.language.boolean.logical.cmake

    - match: '\b(?:IS|PASS|FAIL)_{{identifier}}\b'
      scope: constant.language.boolean.other.cmake
